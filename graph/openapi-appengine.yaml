# [START swagger]
swagger: "2.0"
info:
  title: Pintro Graph Api
  version: '0.1'
produces:
  - application/json
consumes:
  - application/json
tags:
  - name: users
  - name: businesses
  - name: spaces
  - name: posts
  - name: following
  - name: search
  - name: tags
schemes:
- "https"
host: "bluej-pintro-project.appspot.com"
# [END swagger]
basePath: /
paths:
  /businesses:
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Businesses'
    post:
      responses:
        '204':
          description: Business created
        '409':
          description: Business with that email already exists
      summary: Create a business
      operationId: create_business
      tags:
        - businesses
  '/businesses/{email}':
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Businesses'
      - name: email
        in: path
        required: true
        type: string
    put:
      responses:
        '204':
          description: Business Fields Deleted
      summary: Update a business by the given fields
      operationId: update_business
      tags:
        - businesses
    get:
      responses:
        '200':
          description: Success
      summary: Fetch a business given its email
      operationId: get_businesses
      tags:
        - businesses
    delete:
      responses:
        '204':
          description: Business Deleted
      summary: Delete a business given its email
      operationId: delete_business
      tags:
        - businesses
  '/following/{follower_email}/{following_email}':
    parameters:
      - name: follower_email
        in: path
        required: true
        type: string
      - name: following_email
        in: path
        required: true
        type: string
    post:
      responses:
        '200':
          description: Success
      summary: >-
        Create a FOLLOW relationship, where follower_email follows
        following_email
      operationId: post_following
      tags:
        - following
    delete:
      responses:
        '200':
          description: Success
      summary: >-
        Delete the FOLLOW relationship, where follower_email follows
        following_email
      operationId: delete_following
      tags:
        - following
  /posts:
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Post'
    post:
      responses:
        '204':
          description: Post created
      summary: Create a post
      operationId: create_post
      tags:
        - posts
  '/posts/{uuid}':
    parameters:
      - name: uuid
        in: path
        required: true
        type: string
    put:
      responses:
        '204':
          description: Post updated
      summary: Update a Post's content
      operationId: update_post
      parameters:
        - name: payload
          required: true
          in: body
          schema:
            $ref: '#/definitions/Post'
      tags:
        - posts
    get:
      responses:
        '200':
          description: Success
      summary: Fetch a post based on its UUID
      operationId: get_posts
      tags:
        - posts
    delete:
      responses:
        '204':
          description: Post deleted
      summary: Delete a post given its uuid
      operationId: delete_post
      tags:
        - posts
  /search:
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Query'
    post:
      responses:
        '200':
          description: Success
      summary: >-
        Search users, business accounts, or co-working spaces given some
        keywords
      description: >-
        It returns a record. It limits the result to only contain at most 10
        spaces,

        business profiles, or users.
      operationId: search_query
      tags:
        - search
  /spaces:
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Spaces'
    post:
      responses:
        '204':
          description: Co-working space created
        '409':
          description: Co-working space with that email already exists
      summary: Create a co-working space
      operationId: create_space
      tags:
        - spaces
  '/spaces/{email}':
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Spaces'
      - name: email
        in: path
        required: true
        type: string
    put:
      responses:
        '204':
          description: Co-working Space Fields Deleted
      summary: Update a co-working space by the given fields
      operationId: update_space
      tags:
        - spaces
    get:
      responses:
        '200':
          description: Success
      summary: Fetch a co-working space given its email
      operationId: get_spaces
      tags:
        - spaces
    delete:
      responses:
        '204':
          description: Co-working space Deleted
      summary: Delete a co-working space given its email
      operationId: delete_space
      tags:
        - spaces
  /tags:
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Label'
    post:
      responses:
        '200':
          description: Success
      summary: Get all tags with the given labels
      operationId: post_tags
      tags:
        - tags
  /users:
    parameters:
      - name: payload
        required: true
        in: body
        schema:
          $ref: '#/definitions/Users'
    post:
      responses:
        '201':
          description: User created
        '409':
          description: User with that email already exists
        '422':
          description: Invalid Email
      summary: Create a user
      operationId: create_user
      tags:
        - users
  '/users/activate/{email}':
    parameters:
      - name: email
        in: path
        required: true
        type: string
    put:
      responses:
        '204':
          description: User activated.
      summary: Activate a user account if it has been deactivated
      operationId: activate users
      tags:
        - users
  '/users/deactivate/{email}':
    parameters:
      - name: email
        in: path
        required: true
        type: string
    put:
      responses:
        '204':
          description: User deactivated.
      summary: Deactivate a user account
      operationId: deactivate users
      tags:
        - users
  '/users/{email}':
    parameters:
      - name: email
        in: path
        required: true
        type: string
    put:
      responses:
        '204':
          description: User Fields Deleted
      summary: Update a user by the given fields
      operationId: update_user
      parameters:
        - name: payload
          required: true
          in: body
          schema:
            $ref: '#/definitions/Users'
      tags:
        - users
    get:
      responses:
        '200':
          description: Success
      summary: Fetch a user given its email
      operationId: get_users
      tags:
        - users
    delete:
      responses:
        '204':
          description: User deleted.
      summary: Delete a user given its email
      operationId: delete_user
      tags:
        - users
  '/users/{email}/followers':
    parameters:
      - name: email
        in: path
        required: true
        type: string
    get:
      responses:
        '200':
          description: Success
      summary: Get followers of a user
      operationId: get followers of a user
      tags:
        - users
  '/users/{email}/followings':
    parameters:
      - name: email
        in: path
        required: true
        type: string
    get:
      responses:
        '200':
          description: Success
      summary: Get the users that the given user is following
      operationId: Get the users that the given user is following
      tags:
        - users
  '/users/{email}/followings/posts':
    parameters:
      - name: email
        in: path
        required: true
        type: string
    get:
      responses:
        '200':
          description: Success
      summary: Get the posts of users the given user follows
      operationId: Get the posts of users the given user follows.
      tags:
        - users
definitions:
  Users:
    required:
      - email
      - full_name
      - password
    properties:
      email:
        type: string
        title: The user email.
      password:
        type: string
        title: The user password.
      full_name:
        type: string
        title: The user full name.
      preferred_name:
        type: string
        title: The user preferred name.
      profile_image:
        type: string
        title: image saved as array of Bytes representing the user's profile pic.
      phone:
        type: string
        title: The user's phone number.
      gender:
        type: string
        title: The User's geneder
      job_title:
        type: string
        title: current job title of the user.
      location:
        type: string
        title: current city of the user.
      short_bio:
        type: string
        title: short bio describing the user of maximum 250 characters.
      story:
        type: string
        title: story describing the user of maximum 250 words.
      education:
        type: string
        title: Highest level obtained.
      tags_as_uuids:
        type: array
        items:
          type: string
    type: object
  Businesses:
    required:
      - email
      - full_name
      - password
    properties:
      email:
        type: string
        title: The business email.
      password:
        type: string
        title: The business password.
      full_name:
        type: string
        title: The business full name.
      profile_image:
        type: string
        title: image saved as array of Bytes representing the business's profile pic.
      phone:
        type: string
        title: The business's phone number.
      location:
        type: string
        title: current city of the business.
      short_bio:
        type: string
        title: short bio describing the business of maximum 250 characters.
      story:
        type: string
        title: story describing the business of maximum 250 words.
    type: object
  Spaces:
    required:
      - email
      - full_name
      - password
    properties:
      email:
        type: string
        title: The co-working space email.
      password:
        type: string
        title: The co-working space password.
      full_name:
        type: string
        title: The co-working space full name.
      profile_image:
        type: string
        title: >-
          image saved as array of Bytes representing the co-working space's
          profile pic.
      phone:
        type: string
        title: The co-working space's phone number.
      location:
        type: string
        title: current city of the co-working space.
      short_bio:
        type: string
        title: short bio describing the co-working space of maximum 250 characters.
    type: object
  Post:
    required:
      - content
    properties:
      content:
        type: string
        title: The content of the post.
      uuid:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      user_email:
        type: string
    type: object
  Query:
    required:
      - query
    properties:
      query:
        type: string
        title: String to look for relevant search.
    type: object
  Label:
    properties:
      labels:
        type: array
        items:
          type: string
    type: object
responses:
  ParseError:
    description: When a mask can't be parsed
  MaskError:
    description: When any error occurs on mask
