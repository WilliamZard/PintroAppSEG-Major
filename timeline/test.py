from main import generate_timeline
from unittest.mock import Mock
import unittest
from flask import jsonify


class TestFunction(unittest.TestCase):
    def test_generate_timeline_on_valid_and_existing_email(self):
        # NOTE: This test assumes graph_api test data exists in the database.
        # This test suite does not create its own data at the moment and is entirely reliant on data generated by graph_api microservice.
        email = 'john.snow@winteriscoming.wes'
        data = {'email': email}
        req = Mock(get_json=Mock(return_value=data), args=data)

        expected_data = str([
            {"content": "second_post", "modified": "2020-03-05T21:41:42.000000000Z",
                "uuid": "1066d651-0f2e-4a4d-84c4-093b88558685"},
            {"content": "Post B Content", "modified": "2020-03-05T21:38:49.632236000Z",
                "uuid": "5c7dd8ac-7ff4-44b0-aedb-de9ecd1e1086"},
            {"content": "Post A Content", "modified": "2020-03-05T21:38:49.632236000Z",
                "uuid": "3575c639-5b63-4e02-a959-f13051b855ff"}
        ])
        self.assertEqual(generate_timeline(req), expected_data)

    def test_generate_timeline_on_non_existing_email(self):
        email = 'does.not@exist.com'
        data = {'email': email}
        req = Mock(get_json=Mock(return_value=data), args=data)

        expected_data = "404 USER NOT FOUND"
        self.assertEqual(generate_timeline(req), expected_data)

# TODO: test for invalid email
# TODO: test 500s


if __name__ == "__main__":
    unittest.main()
